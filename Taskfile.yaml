version: "3"

vars:
  git_root:
    sh: git rev-parse --show-toplevel
  python_root: "{{.USER_WORKING_DIR}}/.python"
  python_version: 3.12
  terraform: 1.9.5
  terraform_docs: v0.18.0
  api_image_name: applingo-images

tasks:
  default:
    desc: Default task.
    cmds:
      - echo "Please enter a task or use '-l' or '--list-all' to list all available tasks"
    silent: true

  python/install/poetry:
    desc: Install 'poetry'
    deps:
      - _python/version/check
    cmds:
      - cmd: curl -sSL https://install.python-poetry.org | POETRY_HOME={{.python_root}} python3 -
      - "{{.python_root}}/bin/poetry --version"
    sources:
      - "{{.python_root}}/bin/poetry"
    silent: true

  _python/version/check:
    cmds:
      - |
        echo "Checking Python version..."
        PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
        if [ "$(printf '%s\n' "3.9" "$PYTHON_VERSION" | sort -V | head -n1)" != "3.9" ]; then
          echo "Python version must be 3.9 or higher"
          exit 1
        fi
    internal: true
    silent: true

  docker/build/func:
    desc: Run 'docker build' for 'FUNC=...' argument.
    dir: "{{.git_root}}"
    deps:
      - python/install/poetry
    vars:
      FUNC_NAME: '{{ .FUNC }}'
      PLATFORMS: '{{ coalesce .PLATFORMS "linux/amd64,linux/arm64" }}'
    cmds:
      - docker build -t {{.api_image_name}}:{{.FUNC_NAME }} --build-arg FUNC_NAME={{.FUNC_NAME}} --build-arg PYTHON_VERSION={{.python_version}} .
    silent: true

  _docker/build/all:
    desc: Run 'docker build' for all funcs.
    dir: "{{.git_root}}"
    deps:
      - python/install/poetry
    cmds:
      - |
        for dir in {{.git_root}}/src/lambdas/*; do
          if [ -d "$dir" ]; then
            func=$(basename "$dir")
            echo "Building $func"
            docker build -t {{.api_image_name}}:$func --build-arg FUNC_NAME=$func --build-arg PYTHON_VERSION={{.python_version}} .
          fi
        done
    silent: true
    internal: true
  
  _docker/push/all:
    desc: Push all images to repository.
    vars:
      REPO_URL: '{{.REPO_URL}}'
    cmds:
      - |
        if [ -z "{{.REPO_URL}}" ]; then
          echo "Error: REPO_URL is not set"
          exit 1
        fi
        if [[ "{{.REPO_URL}}" == *.amazonaws.com ]]; then
          aws ecr get-login-password --region {{.REGION}} | docker login --username AWS --password-stdin {{.REPO_URL}}
        fi
        for f in {{.git_root}}/cmd/*; do
          if [ -d "$f" ]; then
            func=$(basename "$f")
            image="{{.api_image_name}}:$func"

            if docker image inspect "${image}" >/dev/null 2>&1; then
              echo "Pushing ${image} to {{.REPO_URL}}"
              docker image tag "${image}" "{{.REPO_URL}}/${image}"
              docker push "{{.REPO_URL}}/${image}"
            fi
          fi
        done
    env:
      AWS_DEFAULT_REGION:    '{{.REGION}}'
      AWS_ACCESS_KEY_ID:     '{{.KEY_ID}}'
      AWS_SECRET_ACCESS_KEY: '{{.ACCESS_KEY}}'
    silent: true
    internal: true

  _terraform/install:
    desc: Install 'terraform'.
    cmds:
      - curl -sL https://releases.hashicorp.com/terraform/{{.terraform}}/terraform_{{.terraform}}_{{OS}}_{{ARCH}}.zip -o /tmp/terraform.zip
      - sudo unzip -o /tmp/terraform.zip -d /usr/local/bin/
      - sudo chmod a+x /usr/local/bin/terraform
      - terraform version
    sources:
      - /usr/local/bin/terraform
    silent: true
    internal: true

  _terraform/plan:
    desc: Run 'terraform plan'.
    dir: "{{.DIR}}"
    deps:
      - _terraform/install
    cmds:
      - |
        if [ -z "${LOCALSTACK}" ]; then
          echo "Error: LOCALSTACK is not set"
          exit 1
        fi
        if [ -z "${REGION}" ]; then
          echo "Error: REGION is not set"
          exit 1
        fi
        terraform init -reconfigure
        terraform plan -var="use_localstack=${LOCALSTACK}" -var="aws_region=${REGION}" -var="arch={{ARCH}}"
    env:
      AWS_DEFAULT_REGION:    '${REGION}'
      AWS_ACCESS_KEY_ID:     '${KEY_ID}'
      AWS_SECRET_ACCESS_KEY: '${ACCESS_KEY}'
    silent: true
    internal: true

  _terraform/apply:
    desc: Run 'terraform apply'.
    dir: "{{.DIR}}"
    deps:
      - _terraform/install
    cmds:
    - |
      if [ "{{.LOCALSTACK}}" = "true" ]; then
        cat << EOF > backend.tf
      terraform {
        backend "local" {
        }
      }
      EOF
        terraform init -reconfigure
      else
        cat << EOF > backend.tf
      terraform {
        backend "s3" {
        }
      }
      EOF
        rm -rf .terraform/ .terraform.lock.hcl terraform.tfstate terraform.tfstate.backup
        terraform init -reconfigure -backend-config=backend_aws.hcl
      fi
      terraform apply --auto-approve -var="use_localstack={{.LOCALSTACK}}" -var="aws_region={{.REGION}}" -var="arch={{ARCH}}"
    env:
      AWS_DEFAULT_REGION:      '{{.REGION}}'
      AWS_ACCESS_KEY_ID:       '{{.KEY_ID}}'
      AWS_SECRET_ACCESS_KEY:   '{{.ACCESS_KEY}}'
    silent: true
    internal: true

  _terraform/fmt/check:
    desc: Run 'terraform fmt'.
    deps:
      - _terraform/install
    cmd: terraform fmt -recursive -check --diff {{.git_root}} || { exit 1; };
    silent: true
    internal: true

  terraform/fmt/fix:
    desc: Run 'terraform fix fmt'.
    dir: "{{.git_root}}/terraform"
    deps:
      - _terraform/install
    cmd: terraform fmt -recursive --diff --write=true
    silent: true

  _terraform/docs/install:
    desc: Install 'terraform docs'
    cmds:
      - curl -sL https://terraform-docs.io/dl/{{.terraform_docs}}/terraform-docs-{{.terraform_docs}}-{{OS}}-{{ARCH}}.tar.gz -o /tmp/terraform-docs.tar.gz
      - sudo tar -C /tmp -xzf /tmp/terraform-docs.tar.gz
      - sudo chmod a+x /tmp/terraform-docs
      - sudo mv /tmp/terraform-docs /usr/local/bin
      - terraform-docs version
    sources:
      - /usr/local/bin/terraform-docs
    silent: true
    internal: true
  
  terraform/docs/run:
    desc: Run 'terraform docs'
    deps:
      - _terraform/docs/install
    cmds:
      - |
        modules=$(find {{.git_root}}/terraform/modules/* {{.git_root}}/terraform/provisioners/* -maxdepth 0 -type d)
        for m in $modules; do
          terraform-docs markdown table --output-file README.md --output-mode inject $m
        done
    silent: true
  
  _localstack/install:
    desc: Install "localstack".
    cmds:
      - python3 -m venv {{.HOME}}/.pyenv
      - ~/.pyenv/bin/python3 -m pip install localstack
    sources:
      - "{{.HOME}}/.pyenv/bin/localstack"
    silent: true
    internal: true

  env/localstack/start:
    desc: Run localstack environment.
    deps:
      - _localstack/install
    cmds:
      - |
        if [ -z "$LOCALSTACK_AUTH_TOKEN" ]; then
          echo "Error: LOCALSTACK_AUTH_TOKEN is not set. Please set this environment variable before running LocalStack."
          exit 1
        fi
      - "{{.HOME}}/.pyenv/bin/localstack start -d"
      - task: _terraform/apply
        vars:
          DIR:        "{{.git_root}}/terraform/provisioners/infra"
          REGION:     us-east-1
          LOCALSTACK: "true"
          KEY_ID:     test
          ACCESS_KEY: test
      - task: _docker/build/all
      - task: _docker/push/all
        vars:
          REPO_URL: "000000000000.dkr.ecr.us-east-1.localhost.localstack.cloud:4566"
      - task: _terraform/apply
        vars:
          DIR:              "{{.git_root}}/terraform/provisioners/service"
          REGION:           us-east-1
          LOCALSTACK:       "true"
          KEY_ID:           test
          ACCESS_KEY:       test
    silent: true

  env/localstack/stop:
    desc: Remove localstack environment.
    cmds:
      - docker stop $(docker ps -q --filter name=localstack) 
      - docker rm $(docker ps -aq --filter name=localstack) || true
    silent: true
